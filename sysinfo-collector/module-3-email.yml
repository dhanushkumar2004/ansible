---
- name: Collect detailed system info from all hosts
  hosts: all
  gather_facts: yes
  become: yes
  become_user: root
  become_method: sudo

  tasks:
    - name: Ensure required tools installed
      apt:
        name: [dmidecode, util-linux, lsb-release]
        state: present
        update_cache: yes
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Get CPU model
      shell: "lscpu | awk -F: '/Model name/ {print $2}' | sed 's/^ *//'"
      register: cpu_model
      changed_when: false

    - name: Get RAM slot info
      shell: |
        total_slots=$(dmidecode -t memory | grep -E '^[[:space:]]*Memory Device' | wc -l)
        used_slots=$(dmidecode -t memory | grep -A5 'Memory Device' | grep -E 'Size: [1-9]' | wc -l)
        mem_type=$(dmidecode -t memory | awk -F: '/^[[:space:]]*Type:/{gsub(/^[ \t]+/, "", $2); if($2!="Unknown" && $2!="") {print $2; exit}}')
        [ -z "$mem_type" ] && mem_type="Unknown"
        echo "$used_slots/$total_slots,$mem_type"
      register: ram_info
      changed_when: false
      args:
        executable: /bin/bash

    - name: Get storage info
      shell: |
        total=0
        out=""
        while read -r name size rota type; do
          if [ "$type" != "disk" ]; then continue; fi
          gb=$(awk "BEGIN {printf \"%.2f\", $size/1024/1024/1024}")
          if [ "$rota" = "0" ]; then kind="SSD"; else kind="HDD"; fi
          out="$out $name:${kind}(${gb}GB)"
          total=$(awk "BEGIN {printf \"%.2f\", $total + $gb}")
        done < <(lsblk -b -d -o NAME,SIZE,ROTA,TYPE | tail -n +2)
        echo "$total,$out"
      register: disk_info
      changed_when: false
      args:
        executable: /bin/bash

    - name: Save sysinfo fact
      set_fact:
        collected_sysinfo:
          hostname: "{{ ansible_hostname }}"
          cpu: "{{ cpu_model.stdout }}"
          ram_mb: "{{ ansible_memtotal_mb }}"
          ram_slots: "{{ (ram_info.stdout.split(',')[0]) }}"
          ram_type: "{{ (ram_info.stdout.split(',')[1]) }}"
          storage_gb: "{{ (disk_info.stdout.split(',')[0]) }}"
          drives: "{{ (disk_info.stdout.split(',',2)[1]) }}"

- name: Aggregate and email reports
  hosts: all
  gather_facts: no
  become: false

  vars:
    report_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"
    report_dir: "/runner/artifacts/{{ ansible_job_id | default('job') }}"
    csv_file: "{{ report_dir }}/sysinfo_report_{{ report_timestamp }}.csv"
    json_file: "{{ report_dir }}/sysinfo_report_{{ report_timestamp }}.json"
    smtp_host: "smtpout.secureserver.net"
    smtp_port: 587
    mail_to: "dhanushkumar.rb@fcsonline.co.in"
    subject: "AWX Sysinfo Report - {{ report_timestamp }}"

  tasks:
    - name: Ensure report directory exists
      run_once: true
      delegate_to: localhost
      file:
        path: "{{ report_dir }}"
        state: directory
        mode: '0755'

    - name: Aggregate host info and write files
      run_once: true
      delegate_to: localhost
      vars:
        data_list: "{{ hostvars | dict2items | map(attribute='value.collected_sysinfo') | select('defined') | list }}"
      block:
        - copy:
            dest: "{{ json_file }}"
            content: "{{ data_list | to_nice_json }}"
        - copy:
            dest: "{{ csv_file }}"
            content: |
              "Hostname","CPU","RAM_MB","RAM_Slots","RAM_Type","Storage_GB","Drives"
              {% for i in data_list %}
              "{{ i.hostname }}","{{ i.cpu }}","{{ i.ram_mb }}","{{ i.ram_slots }}","{{ i.ram_type }}","{{ i.storage_gb }}","{{ i.drives }}"
              {% endfor %}
        - debug:
            msg: "✅ Reports created in {{ report_dir }}"

    - name: Send email with attachments
      run_once: true
      delegate_to: localhost
      shell: |
        python3 - <<'EOF'
        import smtplib, ssl, os
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from email.mime.base import MIMEBase
        from email import encoders

        smtp_server = "{{ smtp_host }}"
        port = {{ smtp_port }}
        sender_email = "{{ smtp_user }}"
        password = "{{ smtp_pass }}"
        receiver_email = "{{ mail_to }}"
        subject = "{{ subject }}"
        body = "Attached are the latest system reports collected by AWX generated on {{ report_timestamp }}.\n\nRegards,\nansible team"

        msg = MIMEMultipart()
        msg["From"] = sender_email
        msg["To"] = receiver_email
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        for path in ["{{ csv_file }}", "{{ json_file }}"]:
            if os.path.exists(path):
                with open(path, "rb") as f:
                    part = MIMEBase("application", "octet-stream")
                    part.set_payload(f.read())
                encoders.encode_base64(part)
                part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(path)}")
                msg.attach(part)
            else:
                print(f"⚠️ File not found: {path}")

        context = ssl.create_default_context()
        with smtplib.SMTP(smtp_server, port) as server:
            server.starttls(context=context)
            server.login(sender_email, password)
            server.sendmail(sender_email, receiver_email, msg.as_string())
        print("📧 Email sent successfully with CSV + JSON attached!")
        EOF
      args:
        executable: /bin/bash
